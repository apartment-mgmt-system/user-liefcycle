name: Deploy to AKS

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 1: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 2: Log in to Docker Hub or other container registry
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Build Docker image
      - name: Build Docker image
        run: |
          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/aprtmt-system-user-lifecycle:${GITHUB_SHA}"
          docker build -t $IMAGE_NAME .
          echo "DOCKER_IMAGE=$IMAGE_NAME" >> $GITHUB_ENV

      # Step 4: Push Docker image to the registry
      - name: Push Docker image
        run: |
          docker push ${{ env.DOCKER_IMAGE }}


      # Step 5: Set up Azure CLI
      - name: Set up Azure CLI
        uses: azure/CLI@v1
        with:
          azcliversion: "2.56.0"
          inlineScript: |
            # Azure login using device code (manual login)
            export AZURE_CONFIG_DIR=$(mktemp -d)
            az login --use-device-code
      
      # Step 7: Set up Kubectl
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      # Step 8: Configure kubectl using kubeconfig
      - name: Configure Kubectl using kubconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config

      # Step 9: Create Kubernetes secret for DB password from GitHub Secrets
      - name: Create Kubernetes secret for DB password
        run: |
          kubectl create secret generic user-service-secrets \
            --from-literal=db-password=${{ secrets.DB_PASSWORD }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply Kubernetes file user-lifecycle-pipeline
        run: |
          kubectl apply -f k8s/user-lifecycle-deployment.yml

      # Step 10: Update Deployment to use the new Docker image and deploy to AKS
      - name: Deploy user service to AKS
        run: |
          # Update deployment YAML with the newly built Docker image
          kubectl set image deployment/user-service user-service=${{ env.DOCKER_IMAGE }}
